//
//  ListViewController.swift
//  ShuffleSongs
//
//  Created by Gilson Gil on 22/03/19.
//  Copyright (c) 2019 Gilson Gil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListDisplayLogic: class {
  func displayLoading()
  func displayList(viewModel: List.TracksList.ViewModel)
}

final class ListViewController: UIViewController {
  var interactor: ListBusinessLogic?
  var listView: ListViewLogic?
  var displayedTracks: [List.DisplayedTrack]?

  // MARK: - Object lifecycle

  init() {
    super.init(nibName: nil, bundle: nil)
    setup()
  }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  // MARK: - Setup

  private func setup() {
    let viewController = self
    let interactor = ListInteractor()
    let presenter = ListPresenter()
    viewController.interactor = interactor
    interactor.presenter = presenter
    presenter.viewController = viewController
  }

  // MARK: - View lifecycle

  override func loadView() {
    let listView = ListView()
    self.listView = listView
    self.view = listView
  }

  override func viewDidLoad() {
    super.viewDidLoad()
    setupTableView()
    fetchList()
  }

  // MARK: - Table View

  private func setupTableView() {
    listView?.tableView.register(ListTrackCell.self, forCellReuseIdentifier: ListTrackCell.reuseIdentifier)
    listView?.tableView.dataSource = self
  }
  
  // MARK: - Fetch List
  
  func fetchList() {
    let request = List.TracksList.Request()
    interactor?.fetchList(request: request)
    displayLoading()
  }
}

// MARK: - Display Logic
extension ListViewController: ListDisplayLogic {
  func displayLoading() {
    DispatchQueue.main.async {
      self.listView?.tableView.isHidden = true
      self.listView?.activityIndicator.startAnimating()
    }
  }

  func displayList(viewModel: List.TracksList.ViewModel) {
    DispatchQueue.main.async {
      self.displayedTracks = viewModel.list
      self.listView?.tableView.isHidden = false
      self.listView?.tableView.reloadData()
      self.listView?.activityIndicator.stopAnimating()
    }
  }
}

// MARK: - UITableView DataSource
extension ListViewController: UITableViewDataSource {
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return displayedTracks?.count ?? 0
  }

  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell = tableView.dequeueReusableCell(withIdentifier: ListTrackCell.reuseIdentifier, for: indexPath)
    if let trackCell = cell as? ListTrackCell, let displayedTrack = displayedTracks?[indexPath.row] {
      trackCell.update(track: displayedTrack)
    }
    return cell
  }
}
